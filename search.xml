<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[“java.lang.ExceptionInInitializerError 解析”]]></title>
      <url>/2017/09/03/%E2%80%9Cjava-lang-ExceptionInInitializerError%20%E8%A7%A3%E6%9E%90%E2%80%9D/</url>
      <content type="html"><![CDATA[<p>今天在火车站浏览「知识星球」的时候，发现辰星大佬也碰到了 java.lang.ExceptionInInitializerError 这个问题，再次研究一番终于搞懂了这个异常发生的原因（之前项目中也碰到过这个问题，但是没有搞懂原因…菜鸡捂脸）。</p>
<a id="more"></a>
<p>根据字面理解这是个初始化异常的问题。往往在单例模式的时候会碰到，是由于初始化顺序不对造成的。</p>
<p>上例子（例子来自<a href="http://blog.csdn.net/fykhlp/article/details/6236316" target="_blank" rel="external">java.lang.ExceptionInInitializerError的原因</a>）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Example example = <span class="keyword">new</span> Example();  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,Boolean&gt; test =   </div><div class="line">        <span class="keyword">new</span> HashMap&lt;Integer, Boolean&gt;();  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Example</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        test.put(<span class="number">1</span>, <span class="keyword">true</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Example <span class="title">getInstance</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> example;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道当加载一个类的时候静态变量是最先开始进行初始化的，并且是<strong>按顺序</strong>进行的。因此 Example 类正常进行初始化的顺序应该是先 example 后 test。但是我们发现 example 初始化是构造函数 Example（）, 它里面调用了 test，要知道此时 test 还没有进行初始化，这也就造成了 ExceptionInInitializerError 问题。</p>
<p>PS：上次碰到这个问题没有搞懂原因就放弃了，要不是今天偶然看到至今还是不明白，深刻反思，「不要成为自己讨厌的那种人」。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Exception </tag>
            
            <tag> 初始化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 手机存储那些事儿]]></title>
      <url>/2017/08/31/Android-%E6%89%8B%E6%9C%BA%E5%AD%98%E5%82%A8%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<p>最近项目开发新增清除缓存需求，于是查阅相关资料并结合功能的实现过程，对手机存储的相关知识做下总结。</p>
<a id="more"></a>
<p>首先看下这张图：</p>
<p><img src="http://ovjvgviry.bkt.clouddn.com/17-8-31/87807963.jpg" alt=""></p>
<p>可以看到，我们把手机存储分为了内部存储和外部存储。</p>
<h3 id="1-内部存储"><a href="#1-内部存储" class="headerlink" title="1. 内部存储"></a>1. 内部存储</h3><p>内部存储指的是存储在手机 /data/data/&lt;应用包名&gt; 目录下的数据，附上一张高清无码大图。</p>
<p><img src="http://ovjvgviry.bkt.clouddn.com/17-8-31/48236743.jpg" alt=""></p>
<p>从图中可以看到（注意：手机没 ROOT 是无法打开该文件夹的），内部存储有以下几种我们熟悉的数据：</p>
<p>files——文件存储（注：其对应路径 /data/data/&lt;应用包名&gt;/files 可通过 context.getFilesDir() 获取）</p>
<p>shared_prefs——sharedPreference 存储</p>
<p>cache——图片缓存（注：其对应路径 /data/data/&lt;应用包名&gt;/cache 可通过 context.getCacheDir() 获取，由于我的项目中用到了 Glide，所以发现 Glide 的图片存在了该目录下的 image_manager_disk_chache 文件夹内）</p>
<p>databases——数据库存储</p>
<h3 id="2-外部存储"><a href="#2-外部存储" class="headerlink" title="2. 外部存储"></a>2. 外部存储</h3><p>外部存储分为内置 SD 卡存储和拓展卡存储（外置 SD 卡）。</p>
<ul>
<li>内置 SD 卡：现在出产的手机基本都自带的，也就是我们常说的存储空间，有 16G，32G，64G，128G（以前的部分老旧低端机没有内置 SD 卡）</li>
<li>外置 SD 卡：可以插入手机的存储卡，扩大手机存储内存</li>
</ul>
<p>特别注意下，一般我们在新建文件夹的时候需要判断一下手机是否有 SD 卡，代码如下（项目中碰到的坑）:</p>
<p><code>Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)</code></p>
<p>对于 SD 卡的路径 /storage/sdcard，我们可以通过 Enviroment 中的方法获取到。</p>
<p><code>Environment.getExternalStorageDirectory()</code></p>
<p>SD 卡的文件路径也可以分为公有路径和私有路径。</p>
<h4 id="2-1-公有路径"><a href="#2-1-公有路径" class="headerlink" title="2.1 公有路径"></a>2.1 公有路径</h4><p>公有路径的获取方式如下：</p>
<p><code>Environment.getExternalStoragePublicDirectory(String type)</code></p>
<p>其参数共有 10 种类型，对应的参数和路径如下表：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>Environment.DIRECTORY_MUSIC</td>
<td>/storage/sdcard0/Music</td>
</tr>
<tr>
<td>DIRECTORY_PODCASTS</td>
<td>/storage/sdcard0/Podcasts</td>
</tr>
<tr>
<td>DIRECTORY_RINGTONES</td>
<td>/storage/sdcard0/Ringtones</td>
</tr>
<tr>
<td>DIRECTORY_ALARMS</td>
<td>/storage/sdcard0/Alarms</td>
</tr>
<tr>
<td>DIRECTORY_NOTIFICATIONS</td>
<td>/storage/sdcard0/Notifications</td>
</tr>
<tr>
<td>DIRECTORY_PICTURES</td>
<td>/storage/sdcard0/Pictures</td>
</tr>
<tr>
<td>DIRECTORY_MOVIES</td>
<td>/storage/sdcard0/Movies</td>
</tr>
<tr>
<td>DIRECTORY_DOWNLOADS</td>
<td>/storage/sdcard0/Download</td>
</tr>
<tr>
<td>DIRECTORY_DCIM</td>
<td>/storage/sdcard0/DCIM</td>
</tr>
<tr>
<td>DIRECTORY_DOCUMENTS</td>
<td>/storage/sdcard0/Documents</td>
</tr>
</tbody>
</table>
<h4 id="2-2-私有目录"><a href="#2-2-私有目录" class="headerlink" title="2.2 私有目录"></a>2.2 私有目录</h4><p>在 SD 卡目录下的 Android 文件夹就是对应的私有目录。打开 Android 目录，可以看到里面还有 data 文件夹，再打开这个文件夹，就是许多应用包名组成的文件夹。可以发现这些包名文件夹里面基本都包含有 files 和 cache 这两个文件夹。这两个文件夹的路径可以通过如下方法获取：</p>
<p>files——sdcard/Android/data/应用包名/files（注：可通过 context.getExternalFilesDir() 获取）</p>
<p>cache——sdcard/Android/data/应用包名/cache（注：可通过 context.getExternalCacheDir() 获取）</p>
<p>当调用 getExternalFilesDir() 和 getExternalCacheDir() 即可创建 files 和 cache 文件夹。看到这，你或许会问：</p>
<blockquote>
<p>这两个文件夹不是和我们上面看到的内部存储一样吗，为什么要存在这里面呢。</p>
</blockquote>
<p>原因在于内部存储空间有限，我们一般都是操作外部存储空间，虽然我们可以获得内部存储的路径，但是我们基本不会去操作内部空间，何况在没有 ROOT 情况下，也没法进行操作。而且 Google 官方也建议我们在外部存储的私有目录下进行数据存储操作。</p>
<p>这是或许你又会问：</p>
<blockquote>
<p>很多 APP 都是在 SD 卡目录下创建文件进行数据存储操作的。</p>
</blockquote>
<p>的确，很多 APP 是这么干的，但是当用户卸载 APP 的时候，<strong>内部存储</strong>中的包名文件夹及相关数据会被删除，<strong>外部存储</strong>的私有目录下相关数据也会跟随包名文件夹一起被删除，但是自己创建的文件夹是不会被删除的。在 sdcard 目录下创建文件不仅不利于系统维护，也会造成用户的反感（反正我是会经常去删除 SD 卡目录下的空文件夹）。</p>
<p>这时候我们再回到清除缓存这个功能上。对于需要被清除的数据，应该是内部存储中<strong>相应的 files</strong> 和 cache 文件夹内的数据和外部存储私有目录下<strong>相应的 files</strong> 和 cache 文件夹内的数据（可根据需求清除 files 文件夹内的相应数据）。</p>
<p>最后附上一个清除缓存数据的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanCacheManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     *             获取当前缓存</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTotalCacheSize</span><span class="params">(Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">long</span> cacheSize = getFolderSize(context.getCacheDir());</div><div class="line">        <span class="keyword">if</span> (Environment.getExternalStorageState().equals(</div><div class="line">                Environment.MEDIA_MOUNTED)) &#123;</div><div class="line">            cacheSize += getFolderSize(context.getExternalCacheDir());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> getFormatSize(cacheSize);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     *            删除缓存</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearAllCache</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        deleteDir(context.getCacheDir());</div><div class="line">        <span class="keyword">if</span> (Environment.getExternalStorageState().equals(</div><div class="line">                Environment.MEDIA_MOUNTED)) &#123;</div><div class="line">            deleteDir(context.getExternalCacheDir());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteDir</span><span class="params">(File dir)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dir != <span class="keyword">null</span> &amp;&amp; dir.isDirectory()) &#123;</div><div class="line">            String[] children = dir.list();</div><div class="line">            <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</div><div class="line">                size = children.length;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">                    <span class="keyword">boolean</span> success = deleteDir(<span class="keyword">new</span> File(dir, children[i]));</div><div class="line">                    <span class="keyword">if</span> (!success) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dir == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> dir.delete();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取文件</span></div><div class="line">    <span class="comment">// Context.getExternalFilesDir() --&gt; SDCard/Android/data/你的应用的包名/files/</span></div><div class="line">    <span class="comment">// 目录，一般放一些长时间保存的数据</span></div><div class="line">    <span class="comment">// Context.getExternalCacheDir() --&gt;</span></div><div class="line">    <span class="comment">// SDCard/Android/data/你的应用包名/cache/目录，一般存放临时缓存数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getFolderSize</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">long</span> size = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            File[] fileList = file.listFiles();</div><div class="line">            <span class="keyword">int</span> size2 = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (fileList != <span class="keyword">null</span>) &#123;</div><div class="line">                size2 = fileList.length;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size2; i++) &#123;</div><div class="line">                    <span class="comment">// 如果下面还有文件</span></div><div class="line">                    <span class="keyword">if</span> (fileList[i].isDirectory()) &#123;</div><div class="line">                        size = size + getFolderSize(fileList[i]);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        size = size + fileList[i].length();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 格式化单位</div><div class="line">     * 计算缓存的大小</div><div class="line">     * <span class="doctag">@param</span> size</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFormatSize</span><span class="params">(<span class="keyword">double</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> kiloByte = size / <span class="number">1024</span>;</div><div class="line">        <span class="keyword">if</span> (kiloByte &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">// return size + "Byte";</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"0KB"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> megaByte = kiloByte / <span class="number">1024</span>;</div><div class="line">        <span class="keyword">if</span> (megaByte &lt; <span class="number">1</span>) &#123;</div><div class="line">            BigDecimal result1 = <span class="keyword">new</span> BigDecimal(Double.toString(kiloByte));</div><div class="line">            <span class="keyword">return</span> result1.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP)</div><div class="line">                    .toPlainString() + <span class="string">"KB"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> gigaByte = megaByte / <span class="number">1024</span>;</div><div class="line">        <span class="keyword">if</span> (gigaByte &lt; <span class="number">1</span>) &#123;</div><div class="line">            BigDecimal result2 = <span class="keyword">new</span> BigDecimal(Double.toString(megaByte));</div><div class="line">            <span class="keyword">return</span> result2.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP)</div><div class="line">                    .toPlainString() + <span class="string">"MB"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> teraBytes = gigaByte / <span class="number">1024</span>;</div><div class="line">        <span class="keyword">if</span> (teraBytes &lt; <span class="number">1</span>) &#123;</div><div class="line">            BigDecimal result3 = <span class="keyword">new</span> BigDecimal(Double.toString(gigaByte));</div><div class="line">            <span class="keyword">return</span> result3.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP)</div><div class="line">                    .toPlainString() + <span class="string">"GB"</span>;</div><div class="line">        &#125;</div><div class="line">        BigDecimal result4 = <span class="keyword">new</span> BigDecimal(teraBytes);</div><div class="line">        <span class="keyword">return</span> result4.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).toPlainString()</div><div class="line">                + <span class="string">"TB"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 存储 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[致不安的自己]]></title>
      <url>/2017/07/08/%E8%87%B4%E4%B8%8D%E5%AE%89%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
      <content type="html"><![CDATA[<p>昨天傍晚，<strong>stormzhang</strong> 推送了这篇文章《<a href="http://mp.weixin.qq.com/s/aP4KWyrKZAY8mbo9ul5Amg" target="_blank" rel="external">推荐一些不错的公众号</a>》。我反反复复看了好几遍，倒不是说文章写得多精彩，也不是推荐了对我来说相见恨晚的公众号，而是对比这些被推荐的公众号的作者，我产生了十足的羞愧感与不安。</p>
<a id="more"></a>
<p>自 2015 年偶然间关注了 <strong>stormzhang</strong>（改名前叫 <strong>AndroidDeveloper</strong>）这个公号，一直被张哥的人格魅力所折服，在张哥开通小密圈的时候也第一时间加入。张哥在圈子内多次提到「写作是一个短期内看不到任何好处，但是却是长期受益的事」，因此极力推荐大家去写作，养成写作的习惯。</p>
<p>在张哥的建议下我搭建了博客，准备开始自己的写作之路。然后从搭建博客至今，只是象征性得写了两篇技术文章，而且绝大部分内容和网上的同类型文章有高度的同质性。对比其他的小伙伴，大家纷纷建博客开公号，坚持写作，持续输出自己的内容，不免感到十分惭愧。</p>
<p>对于生活上总结出的观点或想法，我会记录下来心想下次写作或许用得上。然而随着笔记中的记录越来越多，我却感到愈发的不安。每次打算写作的时候心想还是晚上再写吧，等到了晚上又想着明天写吧，然后就不了了之。从这件事上看，我是一个执行力极弱的人。反思自己还想着要干这干那，成就自己的事业，简直是个笑话。经常对自己说「不要成为自己讨厌的那种人」，然而却在不经意间就成为了那种人。</p>
<p>最近在看阮一峰老师写的《<a href="https://ruanyf.github.io/survivor/index.html" target="_blank" rel="external">未来世界的幸存者</a>》这本书，联想到前段时间华为开始清理 34 岁以上员工的传言，愈发感到不安。身处这个剧烈变化的年代，人工智能、VR/AR 等新技术层出不穷。作为一个互联网开发人员，倘若不好好规划下自己的当下和未来，等过了人的生理和智能的巅峰后，那么被新人替代也不可避免了。</p>
<p><strong>投资自己是最好的投资</strong>。从这篇文章开始，养成定期写作的习惯，不要让自己成为自己讨厌的那种人。</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手机抓包教程]]></title>
      <url>/2017/06/25/%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>Android 开发中经常需要通过抓包来解决一些问题，今天就来讲下 Android 手机的抓包过程。</p>
<a id="more"></a>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>手机抓包肯定需要手机啦，不过必须是 Root 过的手机，否则无法抓包，手机 Root 过程不再赘述，随便下载一个「ROOT 大师」之类的软件便可 Root 成功。除此之外必须要下载 <a href="https://pan.baidu.com/s/1o8LTZOu" target="_blank" rel="external">tcpdump</a>。工具都准备好了，接下来就可以开始 tcpdump 安装过程了。</p>
<h3 id="tcpdump-安装过程"><a href="#tcpdump-安装过程" class="headerlink" title="tcpdump 安装过程"></a>tcpdump 安装过程</h3><h4 id="1、安装-tcpdump"><a href="#1、安装-tcpdump" class="headerlink" title="1、安装 tcpdump"></a>1、安装 tcpdump</h4><p>通过 adb 命令把下载来的 tcpdump 导入手机。具体的 adb 命令如下：</p>
<ul>
<li>adb shell</li>
<li>su</li>
<li>chmod 777 /data/local – 给 /data/local 路径赋予访问权限</li>
</ul>
<p>接下来重新打开终端，把 tcpdump 复制进  /data/local 目录下，命令如下：</p>
<ul>
<li>adb push <strong>/Users/xiaoyunlou/抓包教程/tcpdump</strong> /data/local —注意粗体部分为 tcpdump 在电脑中的路径，只要把 tcpdump 拖进终端即可显示</li>
</ul>
<h4 id="2、给-tcpdump-赋予权限"><a href="#2、给-tcpdump-赋予权限" class="headerlink" title="2、给 tcpdump 赋予权限"></a>2、给 tcpdump 赋予权限</h4><p>重新打开终端，依次输入如下命令：</p>
<ul>
<li>adb shell</li>
<li>su</li>
<li>chmod 777 /data/local/tcpdump – 此步骤便是给 tcpdump 赋予权限</li>
</ul>
<p>至此，抓包前的准备都已完成，只要手机成功安装了 tcpdump 就可以开始抓包的操作了。</p>
<h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>重新打开终端，输入如下命令：</p>
<ul>
<li>adb shell</li>
<li>su</li>
<li>/data/local/tcpdump -p -s 0 -w /sdcard/6.pcap – 6.pcap就是抓到的包 </li>
</ul>
<p>这时候，如果终端显示</p>
<p><img src="https://ooo.0o0.ooo/2017/06/25/594fd9f07e3f4.png" alt="屏幕快照 2017-06-25 22.57.51"></p>
<p>则表示正在抓包，当做完网络相关操作便可在终端执行 ctrl + c 结束抓包。这时候你会在手机的根目录下看到一个 6.pcap 的文件，这便是我们抓到的包，最后执行下列命令即可把抓到的包复制到电脑上。</p>
<ul>
<li>adb pull /sdcard/6.pcap</li>
</ul>
<p>这时候我们就可以在电脑上通过 wireshark 之类的抓包分析工具对抓到的包进行分析了。</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 抓包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最新 MAC 上基于 Github + Hexo 博客搭建教程]]></title>
      <url>/2017/05/20/%E6%9C%80%E6%96%B0%20MAC%20%E4%B8%8A%E5%9F%BA%E4%BA%8E%20Github%20+%20Hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>折腾了大半天的时间终于搭建好了自己的博客。在网上随便一搜就有一大堆搭建博客的教程，那为什么还要再写一遍呢。原因如下：</p>
<a id="more"></a>
<ul>
<li>网上绝大多数教程是基于 Windows 系统搭建的博客，在苹果系统上搭建博客的教程不多。</li>
<li>记录搭建博客过程中踩过的坑，帮助更多的小伙伴。 </li>
</ul>
<p>言归正传，接下来进入博客的搭建过程。</p>
<h3 id="1-Node-js-下载和安装"><a href="#1-Node-js-下载和安装" class="headerlink" title="1. Node.js 下载和安装"></a>1. Node.js 下载和安装</h3><p>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js 下载地址</a></p>
<h3 id="2-Git-的下载和安装"><a href="#2-Git-的下载和安装" class="headerlink" title="2. Git 的下载和安装"></a>2. Git 的下载和安装</h3><p>下载地址：<a href="https://git-scm.com/download/" target="_blank" rel="external">Git 下载地址</a></p>
<h3 id="3-Hexo-安装（重点）"><a href="#3-Hexo-安装（重点）" class="headerlink" title="3. Hexo 安装（重点）"></a>3. Hexo 安装（重点）</h3><ul>
<li><p>打开苹果电脑终端</p>
</li>
<li><p>输入安装命令 </p>
<p><code>$ sudo npm install -g hexo-cli</code></p>
</li>
<li><p>输入检验是否安装成功命令</p>
<p><code>$ hexo -v</code></p>
<p>若安装成功，会出现如下信息：</p>
<p><img src="http://i4.buimg.com/588926/a4a7f68b964afd96.jpg" alt=""></p>
</li>
<li><p>在 Mac 的 User 目录下新建文件夹，取名 Hexo</p>
</li>
<li><p>输入下面的命令，进入到 Hexo 目录下</p>
<p><code>$ cd Hexo/</code></p>
</li>
<li><p>输入下面命令，随后会在 Hexo 文件夹下简历网站所需要的所有文件</p>
<p><code>$ hexo init</code></p>
</li>
<li><p>现在，一个本地博客已经搭建成功，可以分别输入以下命令进行验证：</p>
<p><code>$ hexo g</code> –生成</p>
<p><code>$ hexo s</code> –启动服务本地预览</p>
<p>服务开启成功后到浏览器中输入 localhost:4000，这时候一个博客便映入眼帘。通过在终端输入Ctrl + C 可以停止本地预览</p>
</li>
</ul>
<h3 id="4-Github-Pages-设置"><a href="#4-Github-Pages-设置" class="headerlink" title="4. Github Pages 设置"></a>4. Github Pages 设置</h3><p>该部分可参考博客 <a href="https://adsuper.github.io/2017/03/19/%E5%9F%BA%E4%BA%8EHexo-Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0-1/" target="_blank" rel="external">珞璃之神-基于Hexo-Github—搭建个人博客笔记</a> 的第三部分「github Pages设置」</p>
<h3 id="5-更换博客主题"><a href="#5-更换博客主题" class="headerlink" title="5.  更换博客主题"></a>5.  更换博客主题</h3><p>在第 2 部分预览的时候，默认加载的主题是「landscape」。不过个人感觉「next」主题似乎更好看。</p>
<p><img src="http://i2.muimg.com/588926/9af6bd168a6db7c0.jpg" alt=""></p>
<p>自个体会下。</p>
<p>具体更换主题步骤如下：</p>
<ul>
<li><p>复制主题，在终端输入以下命令</p>
<p><code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>
</li>
<li><p>配置 Hexo 目录下的 config.yml 配置文件中的 theme 属性，将其设置为 next</p>
</li>
<li><p>启用 next 主题</p>
<p><code>$ cd themes/next</code> –在终端上从 Hexo 根目录进入你复制的主题目录</p>
<p><code>$ git pull</code></p>
<p><code>$ hexo clean</code> –清除默认的缓存主题</p>
<p><code>$ hexo g</code> –生成</p>
<p><code>$ hexo s</code> –启动本地预览</p>
</li>
<li><p>到浏览器中输入 localhost:4000 查看 next 主题是否更换成功</p>
</li>
</ul>
<p>至此，基于Github + Hexo 的博客也已经搭建成功！</p>
<h3 id="6-一键发布博客"><a href="#6-一键发布博客" class="headerlink" title="6. 一键发布博客"></a>6. 一键发布博客</h3><p>接下来，教大家一键部署博客到 Github 的方法。</p>
<p>此部分完全参考博客 <a href="https://smartbeng.github.io/2017/03/26/blogFinish/" target="_blank" rel="external">smartbeng-最适合新手的 GitHub + Hexo 「大话」博客搭建教程</a> ，内容如下：</p>
<ol>
<li><p>进入 Hexo 的根目录 接着操作以下命令</p>
<p><code>$ cd Hexo</code></p>
<p>注意 1：现在我们需要clone我们自己的GitHub仓库了</p>
<p>注意 3：切记下面是<strong>你自己的仓库名</strong> , 把名字都改过来 , 下面我用的是我的仓库名字</p>
<p><code>$ git clone https://github.com/storm/</code></p>
<p><code>strom.github.io.git .deploy/storm.github.io</code></p>
<p>翻译下这条命令的意思</p>
<p>将我们之前创建的GitHub 仓库克隆到本地 , 命令会新建一个目录叫做.deploy用于存放克隆的代码。</p>
<p>然后会在.deploy文件夹下生成一个 <strong>你的名字.github.io</strong> 的文件夹用于存放文件</p>
</li>
<li><p>接着在 Hexo <strong>根目录</strong>下创建一个 .txt 文件 , 把下面的命令复制进去</p>
</li>
<li><p>注意 ：<strong>你的GitHub名字</strong>是什么就<strong>把你的名字全部改到下面</strong> , 细心点（下面加粗的部分就是待修改的地方）</p>
<p>hexo generate</p>
<p>cp -R public/<em> .deploy/<em>*jacman</em></em>.github.io</p>
<p>cd .deploy/<strong>jacman</strong>.github.io</p>
<p>git add .</p>
<p>git commit -m “update”</p>
<p>git push origin master</p>
</li>
<li><p>将这个 <strong>.txt 文件的后缀改成 .sh</strong> , 它就变成了脚本文件 , 我们就将文件改成 <strong>deploy.sh</strong> 吧！意思就是部署</p>
</li>
<li><p>从此以后需要部署本地博客到 GitHub , 直接把脚本拖入到终端运行即可。</p>
</li>
</ol>
<p>该部分需要注意的事项：</p>
<ol>
<li>脚本拖入终端运行时一定要切换到 Hexo 目录下</li>
<li>运行如显示 Permission denied 说明没有权限，此时需要对脚本进行赋予权限的操作：在终端输入chmod 777，接着拖入脚本，再按回车，权限赋予成功后再把脚本拖入终端运行即可（运行脚本一定要切换到 Hexo目录下）。</li>
</ol>
<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><p>搭建博客过程中会踩到许多坑，其中很多问题都是由于没有切换到 Hexo 目录下造成的。若能在终端上切换到正确的目录下进行操作，搭建博客的过程也会顺利不少。</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
